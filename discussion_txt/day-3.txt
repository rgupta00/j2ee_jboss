JEE with Jboss EAP
-----------------------------
	=> Configuration jndi jdbc connection pool
	=> DB programming with EJB
	=> EJB JPA
	=> CRUD JPA
	=> CRUD application EJB JPA servlet jsp


Example 1: jboss datasource configuration
------------------------------------------
	connection pooling concept: increase the application performance
	
	now we know what is jdbc: API to connect to the database
	
	DriverManager.getConnection: performance problem
	vs
	dataSource is better in performance?
	
	
Example 1: how to configure datasouce connection pool with Jboss EAP server:
---------------------------------------------------------

step 1: put driver with 
C:\jboss-eap-7.3\modules\system\layers\base\com
 and put mysql module
 
step 2: add driver to standalone.xml

                    <driver name="mysql" module="com.mysql">
                        <driver-class>com.mysql.jdbc.Driver</driver-class>
                        <xa-datasource-class>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</xa-datasource-class>
                    </driver>
					
step 3: Create datasource connection pool in jboss using gui
check connection is working or not?

Example 4: i will use this datasource that is configured in jboss 
in my application


java:/MySqlDS


Example 2: checking configuration of datasouce connection: java:/MySqlDS
----------------------------------------------------


	# Each datasource contains a pool of database connections 
	that are reserved as soon as the server is started up. 


	# Applications acquire a database connection from the datasource by looking it
		up on the JNDI tree and then calling getConnection().


	Connection result = null;
	try {
			Context initialContext = new InitialContext();
			DataSource datasource =(DataSource)initialContext.lookup("java:/mydb");
			result = datasource.getConnection();
	}
	catch ( Exception ex )
 	{
		log("Cannot get connection: " + ex);
	}

Using DI
-------------
	@Resource(lookup="java:/MySqlDS")
	private DataSource dataSource;
	


DB programming with EJB
__________________________

step 1: 
---------
java:/MySqlDS


create table books
(
	id int not null primary key auto_increment,
	isbn varchar(20) not null,
	title varchar(20) not null,
	price int not null
);


insert into books(isbn, title, price)values('EW121','core java head first',500);
insert into books(id, title, price, author,publisher ,year)values('ASZ12','SCJP 1.8',550);



select * from books;



step-2
----------
Use datasource connection  java:/MySqlDS

	
	public class Book{
		
		private int id;
		private String isbn;
		private String title;
		private int price;
		

@Remote
public interface BookDAO {
	void addBook (Book book);
}



@Stateless
public class BookDAOImp implements BookDAO {

	private Connection connection;

	@Resource(lookup = "java:/MySqlDS")
	private DataSource dataSource;

	@PostConstruct
	public void initialize() {
		System.out.println("In PostConstruct");
		try {
			connection = dataSource.getConnection();
		} catch (SQLException sqle) {
			sqle.printStackTrace();
		}
	}

	public void addBook(Book book) {
		//..........
	}

	@PreDestroy
	public void releaseResources() {
		System.out.println("In PreDestroy");
		try {
			if (connection != null) {
				connection.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
} 


EJB project:
--------------
put everything in one project : war application

better way:
ejb project + web project -------------> ear project
										enterprise application
										

Hibernate/JPA?
---------------

Java persistance api: better way to intect with the database 
it is acting as a ORM framework
Object relational mapping

jdbc vs jpa

	
JPA with EJB CRUD application
_______________________________



	Step 1: Create POJO annotated with JPA annotations
	------------------------------------------------

	Hello World JPA POJO:


		@Entity
		public class Book implements Serializable {
			private static final long serialVersionUID = 1L;
			@Id
			@GeneratedValue
			private int id;

			@NotNull
			private String isbn;
			
			@NotNull
			private String title;
			private int price;
			



		.........
		.............






	Step 2: update persistance.xml
	---------------------------------

	<persistence version="2.1"
	xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence 							
	http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
		<persistence-unit name="demo_jpa" transaction-type="JTA">
			<jta-data-source>java:/mydb</jta-data-source>
				<class>com.model.Customer</class>

				<properties>
					<property name="showSql" value="true" />
					<property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" />
					<property name="hibernate.hbm2ddl.auto" value="create-drop" />
				</properties>
		</persistence-unit>
	</persistence>





	Step 3: Create an EJB 
	---------------------------------------
		@Remote
		public interface BookDao {
			public List<Book> getAllBooks();
			public Book getBookById(int bookId);
			public Book  addBook(Book book);
			public Book updateBook(int bookId, Book book);
			public Book deleteBook(int bookId);
		}




	Implementation:
	-----------------

		
		@Stateless
		public class BookDaoImp implements BookDao {
		
			@PersistenceContext
			private EntityManager em;
			
			
		    public BookDaoImp() {}
		
			@Override
			public List<Book> getAllBooks() {
				return em.createQuery("from Book").getResultList();
			}
		
			@Override
			public Book getBookById(long bookId) {
				return em.find(Book.class, bookId);
			}
		
			@Override
			public void addBook(Book book) {
				 em.persist(book);
			}
		
			@Override
			public void updateBook(Book book) {
				 em.merge(book);
			}
		
			@Override
			public void deleteBook(long bookId) {
				em.remove(bookId);
			}
		
		}



	2.Create an singleton to test it !
	--------------------------

	@Singleton
	@LocalBean
	@Startup
	public class Main {

	BookDao bookDao;
			
		    public Tester() {}
		  
		    @PostConstruct
		    public void test(){
		    	System.out.println("--------------");
		    	Book book=new Book("head first", 3333, "kathy", "oreally", "2005");
		    	
		    	bookDao.addBook(book);
		    	
		    	System.out.println("------------------");
		    }
	}




	JPA with servlet Without EJB (Need to start the transaction)
	------------------------------------------------------------


	@WebServlet("/Tester")
	public class Tester extends HttpServlet {
	
	@PersistenceUnit(name="app")
	EntityManagerFactory emf;
	

	//Need to start an transaction ( as servlet is not ejb !)

	@Resource
	private UserTransaction userTransaction;



	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		EntityManager em=emf.createEntityManager();

		//Adding an Book, Need to start an transaction
		
		try{
			userTransaction.begin();
			
			Book b=new Book(..........);
			............
			............
			
			em.persist(b);
			
			userTransaction.commit();

			System.out.println("===========saved=================");
		}catch (Exception e) {
			e.printStackTrace();
		}	
		
		....................
		....................
	}

	

	}


	
	JPA with servlet With EJB No Need to start the transaction, as EJB are transactional
	---------------------------------------------------------------------------------


		
		@WebServlet("/BookController")
		public class BookController extends HttpServlet {
		
			@EJB
			private BookDao bookDao;
			
			
			protected void doGet(HttpServletRequest request, HttpServletResponse response) 
					throws ServletException, IOException {
		
				List<Book> books=bookDao.getAllBooks();
				
				RequestDispatcher rd=request.getRequestDispatcher("show.jsp");
				request.setAttribute("books", books);
				rd.forward(request, response);	
				
			}
		
		}


_____________________
Relationship mapping:
___________________

in ER diagarm:
____________

one to many
one to one 
many to one 
many to many



____________________
one-to-one mapping
_____________________

	In a one-to-one mapping the owner can be
	 either the source entity or the target entity.


		1		1
	Employee<>----------Parking

	public class Parking {

		private int partingId;
		private String parkingLocation;
	
		private Employee employee;
	}
	
	public class Employee {
		private int empId;
		private String empName;

		private Parking parking;

	}

			Employee employe=new Employee();
			employe.setEmpName("sumit");

			Parking parking=new Parking();
			parking.setParkingLocation("E31");

			parking.setEmployee(employe);
			employe.setParking(parking);

			employeeRepo.save(employe);
			parkingRepo.save(parking);

Now apply annotations
_____________________

@Entity
public class Parking {
	@Id
	@GeneratedValue
	private int partingId;
	private String parkingLocation;

	@OneToOne(mappedBy = "parking")
	private Employee employee;



@Entity
public class Employee {
	@Id
	@GeneratedValue
	private int empId;
	private String empName;

	@OneToOne
	private Parking parking;



List<Parking> list=session.createQuery("from Parking p join fetch p.employee Employee").list();
	
	Criteria criteria = session.createCriteria(Parking.class);
			criteria.setFetchMode("employee",FetchMode.EAGER);
	
				
@BatchSize(size=5) on emp
http://www.javamakeuse.com/2015/03/tutorial-hibernate-4-batch-fetching.html


from Emp e join fetch e.parking Parking

____________
one to many
_____________
Consider:-
	1		N

reverse owner		owner of relationship

Department -----------<>------ Employee

public class Employee {
	
	private int empId;
	private String empName;
	private Department department;
}

public class Department {
	
	private int deptId;
	private String detpName;
	private List<Employee>employees=new ArrayList<Employee>();
}


@Entity
public class Employee {

	@Id
	@GeneratedValue
	private int empId;
	private String empName;

	@ManyToOne
	private Department department;

@Entity
public class Department {
	@Id
	@GeneratedValue
	private int deptId;
	private String detpName;
	
	@OneToMany(mappedBy="department")
	private Collection<Employee>employees=new ArrayList<Employee>();
	




//			List<Employee> employees=employeeRepo.findByDepartmentDname("IT");
//
//			employees.forEach(e-> System.out.println(e));


//			List<DeptEmpResponse> deptEmpResponses=
//					departmentRepo.deptEmpInforation();
//			deptEmpResponses.forEach(r-> System.out.println(r));

//			Department d1=new Department("fin");
//			Department d2=new Department("IT");
//			Department d3=new Department("sales");
//
//			Employee emp1=new Employee("ravi", 6000.00, d1);
//			Employee emp2=new Employee("ekta", 4000.00, d1);
//
//			Employee emp3=new Employee("keshav", 7000.00, d2);
//			Employee emp4=new Employee("gunika", 3400.00, d2);
//
//			Employee emp5=new Employee("raj", 7800.00, d3);
//
//			//dept 1 have 1,2 emps
//			d1.getEmployees().add(emp1);
//			d1.getEmployees().add(emp2);
//
//
//			d2.getEmployees().add(emp3);
//			d2.getEmployees().add(emp4);
//
//			d3.getEmployees().add(emp5);
//
//			departmentRepo.save(d1);
//			departmentRepo.save(d2);
//			departmentRepo.save(d3);
//
//			employeeRepo.save(emp1);
//			employeeRepo.save(emp2);
//			employeeRepo.save(emp3);
//			employeeRepo.save(emp4);
//			employeeRepo.save(emp5);


______________________________
Collection of Basic Types
_____________________________

One book have many reviews ( of string data type)

@Entity
public class Book {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private int id;
	private String isbn;
	private String title;
	private String author;
	private double price;
	
	@ElementCollection(fetch=FetchType.LAZY)
	@CollectionTable(name="book_reviews")
	@Column(name="review")
	private List<String> reviews=new ArrayList<String>();
	

________________________
Many-to-Many mapping
________________________

	   N		      N
	Employee----<>----- Project




	Create POJO
	___________-

	public class Employee {
	
		private int empId;
		private String empName;
	
		private Collection<Project> projects = new ArrayList<Project>();




	public class Project {
		private int projectId;
		private String projectName;

		private List<Employee> employees = new ArrayList<Employee>();



Apply annotations
________________

	@Entity
	public class Employee {
		@Id
		@GeneratedValue
		private int empId;
		private String empName;

		@ManyToMany
		private Collection<Project> projects = new ArrayList<Project>();



	@Entity
	public class Project {
		@Id
		@GeneratedValue
		private int projectId;
		private String projectName;

		@ManyToMany(mappedBy="projects")
		private Collection<Employee> employees = new ArrayList<Employee>();

http://www.datadisk.co.uk/html_docs/ejb/ejb3.htm